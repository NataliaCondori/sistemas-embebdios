/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
/* Initialize all configured peripherals */
MX_GPIO_Init();
MX_DMA_Init();
MX_DAC1_Init();
MX_TIM2_Init();
/* USER CODE BEGIN 2 */
HAL_TIM_Base(&htim2);
calcsin();
HAL_DAC_Start_DMA(&hdac,
DAC_CHANNEL_1, sine_val, 100,
DAC_ALIGN_128_R);
/* USER CODE END 2 */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
{
/* USER CODE END WHILE */
/* USER CODE BEGIN 3 */
}
/* USER CODE END 3 */
}
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
if (HAL_PWREx_ControlVoltageScaling
(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
{
Error_Handler();
}
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.
OscillatorType =
RCC_OSCILLATORTYPE_MSI;
RCC_OscInitStruct.MSIState
= RCC_MSI_ON;
RCC_OscInitStruct.
MSICalibrationValue = 0;
RCC_OscInitStruct.MSIClockRange
= RCC_MSIRANGE_6;
RCC_OscInitStruct.PLL.PLLState
= RCC_PLL_ON;
RCC_OscInitStruct.PLL.PLLSource
= RCC_PLLSOURCE_MSI;
RCC_OscInitStruct.PLL.PLLM = 1;
RCC_OscInitStruct.PLL.PLLN = 36;
RCC_OscInitStruct.PLL.PLLP =
RCC_PLLP_DIV7;
RCC_OscInitStruct.PLL.PLLQ =
RCC_PLLQ_DIV2;
RCC_OscInitStruct.PLL.PLLR =
RCC_PLLR_DIV2;
if (HAL_RCC_OscConfig
(&RCC_OscInitStruct) != HAL_OK)
{
Error_Handler();
}
RCC_ClkInitStruct.ClockType =
RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource =
RCC_SYSCLKSOURCE_PLLCLK;
RCC_ClkInitStruct.AHBCLKDivider =
RCC_SYSCLK_DIV1;
RCC_ClkInitStruct.APB1CLKDivider =
RCC_HCLK_DIV1;
RCC_ClkInitStruct.APB2CLKDivider =
RCC_HCLK_DIV1;
if (HAL_RCC_ClockConfig
(&RCC_ClkInitStruct, FLASH_LATENCY_4) !
= HAL_OK)
{
Error_Handler();
}
}
/**
* @brief DAC1 Initialization Function
* @param None
* @retval None
*/
static void MX_DAC1_Init(void)
{
/* USER CODE BEGIN DAC1_Init 0 */
/* USER CODE END DAC1_Init 0 */
DAC_ChannelConfTypeDef sConfig = {0};
/* USER CODE BEGIN DAC1_Init 1 */
/* USER CODE END DAC1_Init 1 */
/** DAC Initialization
*/
hdac1.Instance = DAC1;
if (HAL_DAC_Init(&hdac1) != HAL_OK)
{
Error_Handler();
}
/** DAC channel OUT1 config
*/
sConfig.DAC_SampleAndHold =
DAC_SAMPLEANDHOLD_DISABLE;
sConfig.DAC_Trigger =
DAC_TRIGGER_T2_TRGO;
sConfig.DAC_OutputBuffer =
DAC_OUTPUTBUFFER_ENABLE;
sConfig.DAC_ConnectOnChipPeripheral =
DAC_CHIPCONNECT_ENABLE;
sConfig.DAC_UserTrimming =
DAC_TRIMMING_FACTORY;
if (HAL_DAC_ConfigChannel
(&hdac1, &sConfig, DAC_CHANNEL_1) !
= HAL_OK)
{
Error_Handler();
}
/* USER CODE BEGIN DAC1_Init 2 */
/* USER CODE END DAC1_Init 2 */
}
/**
* @brief TIM2 Initialization
Function
* @param None
* @retval None
*/
static void MX_TIM2_Init(void)
{
/* USER CODE BEGIN TIM2_Init 0 */
/* USER CODE END TIM2_Init 0 */
TIM_ClockConfigTypeDef
sClockSourceConfig = {0};
TIM_MasterConfigTypeDef
sMasterConfig = {0};
/* USER CODE BEGIN TIM2_Init 1 */
/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
htim2.Init.Prescaler = 72-1;
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
htim2.Init.Period = 100;
htim2.Init.ClockDivision
= TIM_CLOCKDIVISION_DIV1;
htim2.Init.AutoReloadPreload
= TIM_AUTORELOAD_PRELOAD_DISABLE;
if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
{
Error_Handler();
}
sClockSourceConfig.ClockSource
= TIM_CLOCKSOURCE_INTERNAL;
if (HAL_TIM_ConfigClockSource
(&htim2, &sClockSourceConfig)
!= HAL_OK)
{
Error_Handler();
}
sMasterConfig.
MasterOutputTrigger =
TIM_TRGO_UPDATE;
sMasterConfig.MasterSlaveMode
= TIM_MASTERSLAVEMODE_DISABLE;
if (HAL_TIMEx_MasterConfigSynchronization
(&htim2, &sMasterConfig) != HAL_OK)
{
Error_Handler();
}
/* USER CODE BEGIN TIM2_Init 2 */
/* USER CODE END TIM2_Init 2 */
}
/**
* Enable DMA controller clock
*/
static void MX_DMA_Init(void)
{
/* DMA controller clock enable */
__HAL_RCC_DMA1_CLK_ENABLE();
/* DMA interrupt init */
/* DMA1_Channel3_IRQn
interrupt configuration */
HAL_NVIC_SetPriority
(DMA1_Channel3_IRQn, 0, 0);
HAL_NVIC_EnableIRQ
(DMA1_Channel3_IRQn);
}
/**
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOA_CLK_ENABLE();
}
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */
/**
* @brief This function is executed
in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation
to report the HAL error return state */
__disable_irq();
while (1)
{
}
/* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
* @brief Reports the name of the
source file and the source line number
* where the assert_param error
has occurred.
* @param file: pointer to the source
file name
* @param line: assert_param error
line source number
* @retval None
*/
void assert_failed(uint8_t *file, uint32_t line)
{
/* USER CODE BEGIN 6 */
/* User can add his own implementation
to report the file name and line number,
ex: printf("Wrong parameters value:
file %s on line %d\r\n", file, line) */
/* USER CODE END 6 */
}
